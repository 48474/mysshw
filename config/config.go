/**
 * @Author   DenysGeng <cnphp@hotmail.com>
 *
 * @Description: 采用toml做为新版本的配置文件
 * @Version: 	1.0.0
 * @Date:     	2021/9/23
 */

package config

import (
	"github.com/BurntSushi/toml"
	"golang.org/x/crypto/ssh"
	"io/ioutil"
	"os/user"
	"path"
)

type (
	Configs struct {
		CfgDir  string   `toml:"cfg_dir"`
		SyncCfg SyncInfo `toml:"sync"`
		Nodes   []Nodes  `toml:"nodes"`
	}

	SyncInfo struct {
		Type        string `toml:"type"`
		RemoteUri   string `toml:"remote_uri"`
		UserName    string `toml:"username"`
		Password    string `toml:"password"`
		KeyPath     string `toml:"keyPath"`
		Passphrase  string `toml:"passphrase"`
		RemotePath  string `toml:"remote_path"`
		AccessToken string `toml:"access_token"`
		GistID      string `tome:"gist_id"`
	}
	Nodes struct {
		Groups   string     `toml:"groups"`
		SSHNodes []*SSHNode `toml:"ssh"`
	}
	SSHNode struct {
		Name       string `toml:"name"`
		Alias      string `toml:"alias,omitempty"`
		Host       string `toml:"host"`
		User       string `toml:"user,omitempty"`
		Port       int    `toml:"port,omitempty"`
		KeyPath    string `toml:"keypath,omitempty"`
		Passphrase string `toml:"passphrase,omitempty"`
		Password   string `toml:"password,omitempty"`
	}
)

//type AutoGenerated struct {
//	CfgDir string `toml:"cfg_dir"`
//	Sync   struct {
//		Type        string `toml:"type"`
//		RemoteURI   string `toml:"remote_uri"`
//		Username    string `toml:"username"`
//		Password    string `toml:"password"`
//		KeyPath     string `toml:"keyPath"`
//		Passphrase  string `toml:"passphrase"`
//		RemotePath  string `toml:"remote_path"`
//		AccessToken string `toml:"access_token"`
//		GistID      string `toml:"gist_id"`
//	} `toml:"sync"`
//	Nodes []struct {
//		Groups string `toml:"groups"`
//		SSH    []struct {
//			Name       string `toml:"name"`
//			User       string `toml:"user,omitempty"`
//			Host       string `toml:"host"`
//			Port       int    `toml:"port,omitempty"`
//			Keypath    string `toml:"keypath,omitempty"`
//			Passphrase string `toml:"passphrase,omitempty"`
//			Password   string `toml:"password,omitempty"`
//			Alias      string `toml:"alias,omitempty"`
//		} `toml:"ssh"`
//	} `toml:"nodes"`
//}

var (
	CFG_PATH string = "~/.sshw.toml"
	//APP_VER  string = "2.5.6.1211"
	//LOG_PATH  = "mysshw.log"
	CFG *Configs
)

func (n *SSHNode) user() string {
	if n.User == "" {
		return "root"
	}
	return n.User
}

func (n *SSHNode) port() int {
	if n.Port <= 0 {
		return 22
	}
	return n.Port
}

func (n *SSHNode) password() ssh.AuthMethod {
	if n.Password == "" {
		return nil
	}
	return ssh.Password(n.Password)
}

func LoadConfigBytes(sshwpath string) ([]byte, error) {
	var cfgPath string
	u, err := user.Current()
	if err != nil {
		return nil, err
	}
	_cfgDir, _cfgFile := path.Split(sshwpath)
	if _cfgDir == "~/" {
		cfgPath = u.HomeDir
	} else {
		cfgPath = _cfgDir
	}
	if _cfgFile != ".sshw.toml" {
		CFG_PATH = path.Join(cfgPath, _cfgFile)
	} else {
		CFG_PATH = path.Join(cfgPath, ".sshw.toml")
	}
	cfgBytes, err := ioutil.ReadFile(CFG_PATH)
	if err == nil {
		return cfgBytes, nil
	}
	return nil, err
}

func LoadConfig() error {
	//fmt.Println("CFG_PATH::", CFG_PATH)
	cfgBytes, err := LoadConfigBytes(CFG_PATH)
	if err != nil {
		return err
	}
	//fmt.Println(string(cfgBytes))
	var c *Configs
	err = toml.Unmarshal(cfgBytes, &c)
	if err != nil {
		return err
	}
	CFG = c
	return nil
}
